-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : B800;  --   LOADI 0
           001 : B8DF;  --   LOADI BestPoint
           002 : 1049;  --   STORE Offset
           003 : B800;  --   LOADI 0
           004 : 7849;  --   ISTORE Offset
           005 : 0849;  --   LOAD Offset
           006 : 6801;  --   ADDI 1
           007 : 1049;  --   STORE Offset
           008 : B800;  --   LOADI 0
           009 : 7849;  --   ISTORE Offset
           00A : 0849;  --   LOAD Offset
           00B : 6801;  --   ADDI 1
           00C : 1049;  --   STORE Offset
           00D : B800;  --   LOADI 0
           00E : 7849;  --   ISTORE Offset
           00F : B8E2;  --   LOADI CurrentPoint
           010 : 1049;  --   STORE Offset
           011 : B800;  --   LOADI 0
           012 : 7849;  --   ISTORE Offset
           013 : 0849;  --   LOAD Offset
           014 : 6801;  --   ADDI 1
           015 : 1049;  --   STORE Offset
           016 : B800;  --   LOADI 0
           017 : 7849;  --   ISTORE Offset
           018 : 1047;  --   STORE Idx
           019 : 1048;  --   STORE Jdx
           01A : 1049;  --   STORE Offset
           01B : 104B;  --   STORE HeadingTheta
           01C : BB00;  --   LOADI Points 
           01D : 1847;  --   ADD Idx
           01E : 1847;  --   ADD Idx
           01F : 1049;  --   STORE Offset
           020 : BB1C;  --   LOADI ConvertedPoints
           021 : 1847;  --   ADD Idx
           022 : 1847;  --   ADD Idx
           023 : 1847;  --   ADD Idx
           024 : 104D;  --   STORE ConvertedOffset
           025 : 8039;  --   CALL FeetToUnits
           026 : 0849;  --   LOAD Offset
           027 : 6801;  --   ADDI 1
           028 : 1049;  --   STORE Offset
           029 : 084D;  --   LOAD ConvertedOffset
           02A : 6801;  --   ADDI 1
           02B : 104D;  --   STORE ConvertedOffset
           02C : 8039;  --   CALL FeetToUnits
           02D : 084D;  --   LOAD ConvertedOffset
           02E : 6801;  --   ADDI 1
           02F : 104D;  --   STORE ConvertedOffset
           030 : 0847;  --   LOAD Idx
           031 : 6801;  --   ADDI 1
           032 : 784D;  --   ISTORE ConvertedOffset
           033 : 0847;  --   LOAD Idx
           034 : 6801;  --   ADDI 1
           035 : 1047;  --   STORE Idx
           036 : 6FF4;  --   ADDI -12
           037 : 4062;  --   JZERO StartSort
           038 : 281C;  --   JUMP ConvertToUnits
           039 : 7049;  --   ILOAD Offset
           03A : 1137;  --   STORE m16sA
           03B : 084E;  --   LOAD SixteenthUnitsInFoot
           03C : 1138;  --   STORE m16sB
           03D : 8114;  --   CALL Mult16s ; Because we know that we won't be given values higher than 6
           03E : 6013;  --   SHIFT -3     ; And round, we have 4 low bits of fractional
           03F : 49FE;  --   AND One
           040 : 1046;  --   STORE Temp
           041 : 093B;  --   LOAD mres16sL
           042 : 6011;  --   SHIFT -1
           043 : 1846;  --   ADD Temp
           044 : 784D;  --   ISTORE ConvertedOffset
           045 : 8800;  --   RETURN
           046 : 0000;  -- Temp: DW 0 ; dumb name
           047 : 0000;  -- Idx: DW 0 ; index for loop
           048 : 0000;  -- Jdx: DW 0 ; index for 2nd loop
           049 : 0000;  -- Offset: DW 0
           04A : 0000;  -- OffsetTo: DW 0
           04B : 0000;  -- HeadingTheta: DW 0 ; atan2 radians units (8 fractional bits)
           04C : 0000;  -- TempTheta: DW 0 ; temporarily stores the candidate new heading during CalcCost
           04D : 0000;  -- ConvertedOffset: DW 0
           04E : 1224;  -- SixteenthUnitsInFoot: DW 4644 ; There are 209.2857... robot units in a foot,
           04F : 7049;  --   ILOAD Offset  ; from P1 x
           050 : 784A;  --   ISTORE OffsetTo  ; to P2 x
           051 : 0849;  --   LOAD Offset
           052 : 6801;  --   ADDI 1
           053 : 1049;  --   STORE Offset
           054 : 084A;  --   LOAD OffsetTo
           055 : 6801;  --   ADDI 1
           056 : 104A;  --   STORE OffsetTo
           057 : 7049;  --   ILOAD Offset  ; from P1 y
           058 : 784A;  --   ISTORE OffsetTo  ; to P2 y
           059 : 0849;  --   LOAD Offset
           05A : 6801;  --   ADDI 1
           05B : 1049;  --   STORE Offset
           05C : 084A;  --   LOAD OffsetTo
           05D : 6801;  --   ADDI 1
           05E : 104A;  --   STORE OffsetTo
           05F : 7049;  --   ILOAD Offset  ; from P1 count
           060 : 784A;  --   ISTORE OffsetTo  ; to P2 count
           061 : 8800;  --   RETURN
           062 : B800;  --   LOADI 0
           063 : 1047;  --   STORE Idx ; loop variable
           064 : B80C;  --     LOADI 12
           065 : 2047;  --     SUB Idx
           066 : 10DB;  --     STORE PointsLeft
           067 : 0936;  --     LOAD c7FFF ; max int
           068 : 10DC;  --     STORE BestCost
           069 : B800;  --     LOADI 0
           06A : 1048;  --     STORE Jdx ; start the loop for Jdx
           06B : BB1C;  --       LOADI ConvertedPoints
           06C : 1848;  --       ADD Jdx
           06D : 1049;  --       STORE Offset
           06E : 80A6;  --       CALL CalculateCost ; outputs to ThisCost
           06F : 08DC;  --       LOAD BestCost
           070 : 20DA;  --       SUB ThisCost
           071 : 307E;  --       JNEG UpdateInnerLoop 
           072 : BB1C;  --       LOADI ConvertedPoints ; if this point is better than previous
           073 : 1848;  --       ADD Jdx
           074 : 1049;  --       STORE Offset
           075 : B8DF;  --       LOADI BestPoint
           076 : 104A;  --       STORE OffsetTo
           077 : 804F;  --       CALL CopyPoint
           078 : 084C;  --       LOAD TempTheta
           079 : 10DD;  --       STORE BestTheta
           07A : 08DA;  --       LOAD ThisCost
           07B : 10DC;  --       STORE BestCost
           07C : 0848;  --       LOAD Jdx
           07D : 10DE;  --       STORE BestIdx
           07E : 0848;  --       LOAD Jdx
           07F : 6803;  --       ADDI 3 ; Our entry size is 3, so we have to jump 3 per iteration
           080 : 1048;  --       STORE Jdx
           081 : 20DB;  --       SUB PointsLeft
           082 : 20DB;  --       SUB PointsLeft
           083 : 20DB;  --       SUB PointsLeft
           084 : 306B;  --       JNEG InnerDistLoop
           085 : B8DF;  --     LOADI BestPoint
           086 : 1049;  --     STORE Offset
           087 : BB47;  --     LOADI RealOutPoints
           088 : 1847;  --     ADD Idx
           089 : 1847;  --     ADD Idx
           08A : 1847;  --     ADD Idx
           08B : 104A;  --     STORE OffsetTo
           08C : 804F;  --     CALL CopyPoint
           08D : BB1C;  --     LOADI ConvertedPoints
           08E : 18DE;  --     ADD BestIdx ; already multiplied by 3
           08F : 104A;  --     STORE OffsetTo ; pointer to the point we just copied
           090 : BB1C;  --     LOADI ConvertedPoints
           091 : 18DB;  --     ADD PointsLeft
           092 : 18DB;  --     ADD PointsLeft
           093 : 18DB;  --     ADD PointsLeft
           094 : 6FFF;  --     ADDI -1
           095 : 6FFF;  --     ADDI -1
           096 : 6FFF;  --     ADDI -1
           097 : 1049;  --     STORE Offset
           098 : 804F;  --     CALL CopyPoint
           099 : B8DF;  --     LOADI BestPoint
           09A : 1049;  --     STORE Offset
           09B : B8E2;  --     LOADI CurrentPoint
           09C : 104A;  --     STORE OffsetTo
           09D : 804F;  --     CALL CopyPoint
           09E : 0847;  --     LOAD Idx
           09F : 6801;  --     ADDI 1
           0A0 : 1047;  --     STORE Idx
           0A1 : 6FF4;  --     ADDI -12
           0A2 : 3064;  --     JNEG OuterDistLoop
           0A3 : B801;  --   LOADI 1
           0A4 : 9807;  --   OUT XLEDS ; signal emulator that we're done
           0A5 : 28A3;  --   JUMP LoopDone
           0A6 : 7049;  --   ILOAD Offset ; Grab xdiff
           0A7 : 20E2;  --   SUB CurrentPoint
           0A8 : 10D8;  --   STORE XDiff
           0A9 : 110F;  --   STORE L2X
           0AA : 0849;  --   LOAD Offset ; And ydiff, note this is inconsistent but it doesn't matter
           0AB : 6801;  --   ADDI 1
           0AC : 1049;  --   STORE Offset
           0AD : 7049;  --   ILOAD Offset
           0AE : 10D9;  --   STORE YDiff
           0AF : B8E2;  --   LOADI CurrentPoint
           0B0 : 6801;  --   ADDI 1
           0B1 : 1049;  --   STORE Offset
           0B2 : 7049;  --   ILOAD Offset
           0B3 : 20D9;  --   SUB YDiff
           0B4 : 10D9;  --   STORE YDiff
           0B5 : 1110;  --   STORE L2Y
           0B6 : 80E5;  --   CALL L2Estimate
           0B7 : 10DA;  --   STORE ThisCost
           0B8 : B801;  --   LOADI 1
           0B9 : 11FB;  --   STORE A2retrad
           0BA : B992;  --   LOADI 402 ; pi/2 with 8 fractional bits
           0BB : 118F;  --   STORE ModuloD
           0BC : 8190;  --   CALL Atan2
           0BD : 204B;  --   SUB HeadingTheta
           0BE : 104C;  --   STORE TempTheta
           0BF : 8184;  --   CALL Modulo ; mod pi/2
           0C0 : 1137;  --   STORE m16sA
           0C1 : 0A08;  --   LOAD TwoPi
           0C2 : 118F;  --   STORE ModuloD
           0C3 : 084C;  --   LOAD TempTheta
           0C4 : 8184;  --   CALL Modulo
           0C5 : 104C;  --   STORE TempTheta
           0C6 : B871;  --   LOADI 113 ; the axle track radius in robot units
           0C7 : 1138;  --   STORE m16sB
           0C8 : 8114;  --   CALL Mult16s ; 113 * fmod(atan2(ydiff, xdiff) - theta, pi/2)
           0C9 : 6017;  --   SHIFT -7
           0CA : 49FE;  --   AND One
           0CB : 1046;  --   STORE Temp
           0CC : 093B;  --   LOAD mres16sL
           0CD : 6011;  --   SHIFT -1
           0CE : 1846;  --   ADD Temp ; Now we have the 8 lsb
           0CF : 113B;  --   STORE mres16sL
           0D0 : 093C;  --   LOAD mres16sH
           0D1 : 6008;  --   SHIFT 8
           0D2 : 493B;  --   AND mres16sL ; Now we have a full 16 bits rounded shouldn't overflow, I hope
           0D3 : 18DA;  --   ADD ThisCost
           0D4 : 10DA;  --   STORE ThisCost
           0D5 : B800;  --   LOADI 0        ; And be nice to other callers of atan2
           0D6 : 11FB;  --   STORE A2retrad
           0D7 : 8800;  --   RETURN
           0D8 : 0000;  -- XDiff: DW 0
           0D9 : 0000;  -- YDiff: DW 0
           0DA : 0000;  -- ThisCost: DW 0
           0DB : 0000;  -- PointsLeft: DW 0
           0DC : 0000;  -- BestCost: DW 0
           0DD : 0000;  -- BestTheta: DW 0 ; stored with 8 fractional bits
           0DE : 0000;  -- BestIdx: DW 0
           0DF : 0000;  --   DW 0 ; x
           0E0 : 0000;  --   DW 0 ; y
           0E1 : 0000;  --   DW 0 ; index + 1 (for reporting)
           0E2 : 0000;  --   DW 0
           0E3 : 0000;  --   DW 0
           0E4 : 0000;  --   DW 0
           0E5 : 090F;  -- 	LOAD   L2X
           0E6 : 8177;  -- 	CALL   Abs
           0E7 : 1111;  -- 	STORE  L2T1
           0E8 : 0910;  -- 	LOAD   L2Y
           0E9 : 8177;  -- 	CALL   Abs
           0EA : 2111;  -- 	SUB    L2T1
           0EB : 3107;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           0EC : 1911;  -- 	ADD    L2T1
           0ED : 1137;  -- 	STORE  m16sa
           0EE : B8F6;  -- 	LOADI  246       ; max * 246
           0EF : 1138;  -- 	STORE  m16sB
           0F0 : 8114;  -- 	CALL   Mult16s
           0F1 : 093C;  -- 	LOAD   mres16sH
           0F2 : 6008;  -- 	SHIFT  8
           0F3 : 1112;  -- 	STORE  L2T2
           0F4 : 093B;  -- 	LOAD   mres16sL
           0F5 : 6018;  -- 	SHIFT  -8        ; / 256
           0F6 : 4A11;  -- 	AND    LowByte
           0F7 : 5112;  -- 	OR     L2T2
           0F8 : 1113;  -- 	STORE  L2T3
           0F9 : 0911;  -- 	LOAD   L2T1
           0FA : 1137;  -- 	STORE  m16sa
           0FB : B868;  -- 	LOADI  104       ; min * 104
           0FC : 1138;  -- 	STORE  m16sB
           0FD : 8114;  -- 	CALL   Mult16s
           0FE : 093C;  -- 	LOAD   mres16sH
           0FF : 6008;  -- 	SHIFT  8
           100 : 1112;  -- 	STORE  L2T2
           101 : 093B;  -- 	LOAD   mres16sL
           102 : 6018;  -- 	SHIFT  -8        ; / 256
           103 : 4A11;  -- 	AND    LowByte
           104 : 5112;  -- 	OR     L2T2
           105 : 1913;  -- 	ADD    L2T3     ; sum
           106 : 8800;  -- 	RETURN
           107 : 1911;  -- 	ADD    L2T1
           108 : 1112;  -- 	STORE  L2T2
           109 : 0911;  -- 	LOAD   L2T1
           10A : 1113;  -- 	STORE  L2T3
           10B : 0912;  -- 	LOAD   L2T2
           10C : 1111;  -- 	STORE  L2T1
           10D : 0913;  -- 	LOAD   L2T3
           10E : 28ED;  -- 	JUMP   CalcDist
           10F : 0000;  -- L2X:  DW 0
           110 : 0000;  -- L2Y:  DW 0
           111 : 0000;  -- L2T1: DW 0
           112 : 0000;  -- L2T2: DW 0
           113 : 0000;  -- L2T3: DW 0
           114 : B800;  -- 	LOADI  0
           115 : 1139;  -- 	STORE  m16sc        ; clear carry
           116 : 113C;  -- 	STORE  mres16sH     ; clear result
           117 : B810;  -- 	LOADI  16           ; load 16 to counter
           118 : 113A;  -- 	STORE  mcnt16s      
           119 : 0939;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           11A : 411E;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           11B : 093C;  -- 	LOAD   mres16sH     ; if a carry, 
           11C : 1937;  -- 	ADD    m16sA        ;  add multiplicand to result H
           11D : 113C;  -- 	STORE  mres16sH
           11E : 0938;  -- 	LOAD   m16sB
           11F : 49FE;  -- 	AND    One          ; check bit 0 of multiplier
           120 : 1139;  -- 	STORE  m16sc        ; save as next carry
           121 : 4125;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           122 : 093C;  -- 	LOAD   mres16sH     ; if bit 0 set,
           123 : 2137;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           124 : 113C;  -- 	STORE  mres16sH
           125 : 0938;  -- 	LOAD   m16sB
           126 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           127 : 4936;  -- 	AND    c7FFF        ; clear msb
           128 : 1138;  -- 	STORE  m16sB
           129 : 093C;  -- 	LOAD   mres16sH     ; load result H
           12A : 600F;  -- 	SHIFT  15           ; move lsb to msb
           12B : 5138;  -- 	OR     m16sB
           12C : 1138;  -- 	STORE  m16sB        ; result L now includes carry out from H
           12D : 093C;  -- 	LOAD   mres16sH
           12E : 6011;  -- 	SHIFT  -1
           12F : 113C;  -- 	STORE  mres16sH     ; shift result H >>1
           130 : 093A;  -- 	LOAD   mcnt16s
           131 : 6FFF;  -- 	ADDI   -1           ; check counter
           132 : 3918;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           133 : 0938;  -- 	LOAD   m16sB
           134 : 113B;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           135 : 8800;  -- 	RETURN              ; Done
           136 : 7FFF;  -- c7FFF: DW &H7FFF
           137 : 0000;  -- m16sA: DW 0 ; multiplicand
           138 : 0000;  -- m16sB: DW 0 ; multipler
           139 : 0000;  -- m16sc: DW 0 ; carry
           13A : 0000;  -- mcnt16s: DW 0 ; counter
           13B : 0000;  -- mres16sL: DW 0 ; result low
           13C : 0000;  -- mres16sH: DW 0 ; result high
           13D : B800;  -- 	LOADI  0
           13E : 1176;  -- 	STORE  dres16sR     ; clear remainder result
           13F : 1173;  -- 	STORE  d16sC1       ; clear carry
           140 : 096F;  -- 	LOAD   d16sN
           141 : 5970;  -- 	XOR    d16sD
           142 : 1171;  -- 	STORE  d16sS        ; sign determination = N XOR D
           143 : B811;  -- 	LOADI  17
           144 : 1172;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           145 : 0970;  -- 	LOAD   d16sD
           146 : 8177;  -- 	CALL   Abs          ; take absolute value of denominator
           147 : 1170;  -- 	STORE  d16sD
           148 : 096F;  -- 	LOAD   d16sN
           149 : 8177;  -- 	CALL   Abs          ; take absolute value of numerator
           14A : 116F;  -- 	STORE  d16sN
           14B : 096F;  -- 	LOAD   d16sN
           14C : 601F;  -- 	SHIFT  -15          ; get msb
           14D : 49FE;  -- 	AND    One          ; only msb (because shift is arithmetic)
           14E : 1174;  -- 	STORE  d16sC2       ; store as carry
           14F : 096F;  -- 	LOAD   d16sN
           150 : 6001;  -- 	SHIFT  1            ; shift <<1
           151 : 5173;  -- 	OR     d16sC1       ; with carry
           152 : 116F;  -- 	STORE  d16sN
           153 : 0972;  -- 	LOAD   d16sT
           154 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           155 : 4165;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           156 : 1172;  -- 	STORE  d16sT
           157 : 0976;  -- 	LOAD   dres16sR
           158 : 6001;  -- 	SHIFT  1            ; shift remainder
           159 : 5174;  -- 	OR     d16sC2       ; with carry from other shift
           15A : 2170;  -- 	SUB    d16sD        ; subtract denominator from remainder
           15B : 3160;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           15C : 1176;  -- 	STORE  dres16sR
           15D : B801;  -- 	LOADI  1
           15E : 1173;  -- 	STORE  d16sC1       ; set carry
           15F : 294B;  -- 	JUMP   Div16s_loop
           160 : 1970;  -- 	ADD    d16sD        ; add denominator back in
           161 : 1176;  -- 	STORE  dres16sR
           162 : B800;  -- 	LOADI  0
           163 : 1173;  -- 	STORE  d16sC1       ; clear carry
           164 : 294B;  -- 	JUMP   Div16s_loop
           165 : 096F;  -- 	LOAD   d16sN
           166 : 1175;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           167 : 0971;  -- 	LOAD   d16sS        ; check the sign indicator
           168 : 316A;  -- 	JNEG   Div16s_neg
           169 : 8800;  -- 	RETURN
           16A : 0975;  -- 	LOAD   dres16sQ     ; need to negate the result
           16B : 59FC;  -- 	XOR    NegOne
           16C : 6801;  -- 	ADDI   1
           16D : 1175;  -- 	STORE  dres16sQ
           16E : 8800;  -- 	RETURN	
           16F : 0000;  -- d16sN: DW 0 ; numerator
           170 : 0000;  -- d16sD: DW 0 ; denominator
           171 : 0000;  -- d16sS: DW 0 ; sign value
           172 : 0000;  -- d16sT: DW 0 ; temp counter
           173 : 0000;  -- d16sC1: DW 0 ; carry value
           174 : 0000;  -- d16sC2: DW 0 ; carry value
           175 : 0000;  -- dres16sQ: DW 0 ; quotient result
           176 : 0000;  -- dres16sR: DW 0 ; remainder result
           177 : 397A;  -- 	JPOS   Abs_r
           178 : 59FC;  -- 	XOR    NegOne       ; Flip all bits
           179 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           17A : 8800;  -- 	RETURN
           17B : 3180;  -- 	JNEG   Mod180n      ; handle negatives
           17C : 6F4C;  -- 	ADDI   -180
           17D : 397C;  -- 	JPOS   Mod180p      ; subtract 180 until negative
           17E : 68B4;  -- 	ADDI   180          ; go back positive
           17F : 8800;  -- 	RETURN
           180 : 68B4;  -- 	ADDI   180          ; add 180 until positive
           181 : 3180;  -- 	JNEG   Mod180n
           182 : 6F4C;  -- 	ADDI   -180         ; go back negative
           183 : 8800;  -- 	RETURN
           184 : 418E;  --   JZERO  Modulo_bail
           185 : 318A;  -- 	JNEG   ModuloN      ; handle negatives
           186 : 198F;  -- 	ADD    ModuloD
           187 : 3986;  -- 	JPOS   ModuloP      ; subtract until negative
           188 : 198F;  -- 	ADD    ModuloD      ; go back positive
           189 : 8800;  -- 	RETURN
           18A : 698F;  -- 	ADDI   ModuloD      ; add until positive
           18B : 318A;  -- 	JNEG   ModuloN
           18C : 698F;  -- 	ADDI   ModuloD      ; go back negative
           18D : 8800;  -- 	RETURN
           18E : 8800;  --   RETURN
           18F : 0000;  -- ModuloD: DW 0
           190 : 09F6;  -- 	LOAD   AtanY
           191 : 8177;  -- 	CALL   Abs          ; abs(y)
           192 : 11F8;  -- 	STORE  AtanT
           193 : 09F5;  -- 	LOAD   AtanX        ; abs(x)
           194 : 8177;  -- 	CALL   Abs
           195 : 21F8;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           196 : 31A1;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           197 : 09F5;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           198 : 319E;  -- 	JNEG   A2_R3
           199 : 81B2;  -- 	CALL   A2_calc      ; Octants 1, 8
           19A : 319C;  -- 	JNEG   A2_R1n
           19B : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           19C : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           19D : 8800;  -- 	RETURN
           19E : 81B2;  -- 	CALL   A2_calc      ; Octants 4, 5            
           19F : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           1A0 : 8800;  -- 	RETURN
           1A1 : 09F6;  -- 	LOAD   AtanY        ; Swap input arguments
           1A2 : 11F8;  -- 	STORE  AtanT
           1A3 : 09F5;  -- 	LOAD   AtanX
           1A4 : 11F6;  -- 	STORE  AtanY
           1A5 : 09F8;  -- 	LOAD   AtanT
           1A6 : 11F5;  -- 	STORE  AtanX
           1A7 : 39AD;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           1A8 : 81B2;  -- 	CALL   A2_calc      ; else octants 6, 7
           1A9 : 59FC;  -- 	XOR    NegOne
           1AA : 6801;  -- 	ADDI   1            ; negate the angle
           1AB : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           1AC : 8800;  -- 	RETURN
           1AD : 81B2;  -- 	CALL   A2_calc      ; Octants 2, 3
           1AE : 59FC;  -- 	XOR    NegOne
           1AF : 6801;  -- 	ADDI   1            ; negate the angle
           1B0 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           1B1 : 8800;  -- 	RETURN
           1B2 : 09F6;  -- 	LOAD   AtanY
           1B3 : 116F;  -- 	STORE  d16sN        ; Y in numerator
           1B4 : 09F5;  -- 	LOAD   AtanX
           1B5 : 1170;  -- 	STORE  d16sD        ; X in denominator
           1B6 : 81E2;  -- 	CALL   A2_div       ; divide
           1B7 : 0975;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           1B8 : 11F7;  -- 	STORE  AtanRatio
           1B9 : 1137;  -- 	STORE  m16sA
           1BA : 1138;  -- 	STORE  m16sB
           1BB : 81D9;  -- 	CALL   A2_mult      ; X^2
           1BC : 1137;  -- 	STORE  m16sA
           1BD : 09F9;  -- 	LOAD   A2c
           1BE : 1138;  -- 	STORE  m16sB
           1BF : 81D9;  -- 	CALL   A2_mult
           1C0 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           1C1 : 1170;  -- 	STORE  d16sD
           1C2 : 09F7;  -- 	LOAD   AtanRatio
           1C3 : 116F;  -- 	STORE  d16sN        ; Ratio in numerator
           1C4 : 81E2;  -- 	CALL   A2_div       ; divide
           1C5 : 0975;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           1C6 : 1137;  -- 	STORE  m16sA        ; <= result in radians
           1C7 : 09FB;  --   LOAD   A2retrad     ; If we should return radians
           1C8 : 39D7;  --   JPOS   A2_rad       ; Just return this
           1C9 : 09FA;  -- 	LOAD   A2cd         ; degree conversion factor
           1CA : 1138;  -- 	STORE  m16sB
           1CB : 81D9;  -- 	CALL   A2_mult      ; convert to degrees
           1CC : 11F8;  -- 	STORE  AtanT
           1CD : 6017;  -- 	SHIFT  -7           ; check 7th bit
           1CE : 49FE;  -- 	AND    One
           1CF : 41D4;  -- 	JZERO  A2_rdwn      ; round down
           1D0 : 09F8;  -- 	LOAD   AtanT
           1D1 : 6018;  -- 	SHIFT  -8
           1D2 : 6801;  -- 	ADDI   1            ; round up
           1D3 : 8800;  -- 	RETURN
           1D4 : 09F8;  -- 	LOAD   AtanT
           1D5 : 6018;  -- 	SHIFT  -8           ; round down
           1D6 : 8800;  -- 	RETURN
           1D7 : 0937;  --   LOAD m16sA
           1D8 : 8800;  --   RETURN
           1D9 : 8114;  -- 	CALL   Mult16s
           1DA : 093C;  -- 	LOAD   mres16sH
           1DB : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           1DC : 113C;  -- 	STORE  mres16sH
           1DD : 093B;  -- 	LOAD   mres16sL
           1DE : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           1DF : 4A11;  -- 	AND    LowByte
           1E0 : 513C;  -- 	OR     mres16sH     ; combine high and low words of result
           1E1 : 8800;  -- 	RETURN
           1E2 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           1E3 : 11F8;  -- 	STORE  AtanT
           1E4 : 09F8;  -- 	LOAD   AtanT
           1E5 : 6FFF;  -- 	ADDI   -1
           1E6 : 39E9;  -- 	JPOS   A2_DN        ; not done; continue shifting
           1E7 : 813D;  -- 	CALL   Div16s       ; do the standard division
           1E8 : 8800;  -- 	RETURN
           1E9 : 11F8;  -- 	STORE  AtanT
           1EA : 096F;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           1EB : 6001;  -- 	SHIFT  1
           1EC : 596F;  -- 	XOR    d16sN        ; if the sign changed,
           1ED : 31F1;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           1EE : 596F;  -- 	XOR    d16sN        ; get back shifted version
           1EF : 116F;  -- 	STORE  d16sN
           1F0 : 29E4;  -- 	JUMP   A2_DL
           1F1 : 0970;  -- 	LOAD   d16sD
           1F2 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           1F3 : 1170;  -- 	STORE  d16sD
           1F4 : 29E4;  -- 	JUMP   A2_DL
           1F5 : 0000;  -- AtanX:      DW 0
           1F6 : 0000;  -- AtanY:      DW 0
           1F7 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           1F8 : 0000;  -- AtanT:      DW 0        ; temporary value
           1F9 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           1FA : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           1FB : 0000;  -- A2retrad:   DW 0        ; bool flag to just return the radians
           1FC : FFFF;  -- NegOne:   DW -1
           1FD : 0000;  -- Zero:     DW 0
           1FE : 0001;  -- One:      DW 1
           1FF : 0002;  -- Two:      DW 2
           200 : 0003;  -- Three:    DW 3
           201 : 0004;  -- Four:     DW 4
           202 : 0005;  -- Five:     DW 5
           203 : 0006;  -- Six:      DW 6
           204 : 0007;  -- Seven:    DW 7
           205 : 0008;  -- Eight:    DW 8
           206 : 0009;  -- Nine:     DW 9
           207 : 000A;  -- Ten:      DW 10
           208 : 0648;  -- TwoPi:    DW 1608 ; 8 fractional bits
           209 : 0001;  -- Mask0:    DW &B00000001
           20A : 0002;  -- Mask1:    DW &B00000010
           20B : 0004;  -- Mask2:    DW &B00000100
           20C : 0008;  -- Mask3:    DW &B00001000
           20D : 0010;  -- Mask4:    DW &B00010000
           20E : 0020;  -- Mask5:    DW &B00100000
           20F : 0040;  -- Mask6:    DW &B01000000
           210 : 0080;  -- Mask7:    DW &B10000000
           211 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           212 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           300 : FFFC;  --   DW -4 ; Entry 00 x
           301 : 0001;  --   DW 1 ; Entry 00 y
           302 : 0003;  --   DW 3 ; Entry 01 x
           303 : FFFE;  --   DW -2 ; Entry 01 y
           304 : FFFD;  --   DW -3 ; Entry 02 x
           305 : FFFF;  --   DW -1 ; Entry 02 y
           306 : 0001;  --   DW 1 ; Entry 03 x
           307 : 0004;  --   DW 4 ; Entry 03 y
           308 : FFFE;  --   DW -2 ; Entry 04 x
           309 : FFFC;  --   DW -4 ; Entry 04 y
           30A : 0000;  --   DW 0 ; Entry 05 x
           30B : FFFB;  --   DW -5 ; Entry 05 y
           30C : FFFD;  --   DW -3 ; Entry 06 x
           30D : 0002;  --   DW 2 ; Entry 06 y
           30E : 0002;  --   DW 2 ; Entry 07 x
           30F : FFFD;  --   DW -3 ; Entry 07 y
           310 : 0002;  --   DW 2 ; Entry 08 x
           311 : 0005;  --   DW 5 ; Entry 08 y
           312 : FFFE;  --   DW -2 ; Entry 09 x
           313 : 0004;  --   DW 4 ; Entry 09 y
           314 : 0003;  --   DW 3 ; Entry 10 x
           315 : FFFD;  --   DW -3 ; Entry 10 y
           316 : FFFC;  --   DW -4 ; Entry 11 x
           317 : FFFE;  --   DW -2 ; Entry 11 y
           318 : 4141;  --   DW &H4141
           319 : 4141;  --   DW &H4141
           31A : 4141;  --   DW &H4141
           31B : 4141;  --   DW &H4141
           31C : 0000;  --   DW 0 ; Entry 00 x
           31D : 0000;  --   DW 0 ; Entry 00 y
           31E : 0000;  --   DW 0 ; Entry 00 count
           31F : 0000;  --   DW 0 ; Entry 01 x
           320 : 0000;  --   DW 0 ; Entry 01 y
           321 : 0000;  --   DW 0 ; Entry 01 count
           322 : 0000;  --   DW 0 ; Entry 02 x
           323 : 0000;  --   DW 0 ; Entry 02 y
           324 : 0000;  --   DW 0 ; Entry 02 count
           325 : 0000;  --   DW 0 ; Entry 03 x
           326 : 0000;  --   DW 0 ; Entry 03 y
           327 : 0000;  --   DW 0 ; Entry 03 count
           328 : 0000;  --   DW 0 ; Entry 04 x
           329 : 0000;  --   DW 0 ; Entry 04 y
           32A : 0000;  --   DW 0 ; Entry 04 count
           32B : 0000;  --   DW 0 ; Entry 05 x
           32C : 0000;  --   DW 0 ; Entry 05 y
           32D : 0000;  --   DW 0 ; Entry 05 count
           32E : 0000;  --   DW 0 ; Entry 06 x
           32F : 0000;  --   DW 0 ; Entry 06 y
           330 : 0000;  --   DW 0 ; Entry 06 count
           331 : 0000;  --   DW 0 ; Entry 07 x
           332 : 0000;  --   DW 0 ; Entry 07 y
           333 : 0000;  --   DW 0 ; Entry 07 count
           334 : 0000;  --   DW 0 ; Entry 08 x
           335 : 0000;  --   DW 0 ; Entry 08 y
           336 : 0000;  --   DW 0 ; Entry 08 count
           337 : 0000;  --   DW 0 ; Entry 09 x
           338 : 0000;  --   DW 0 ; Entry 09 y
           339 : 0000;  --   DW 0 ; Entry 09 count
           33A : 0000;  --   DW 0 ; Entry 10 x
           33B : 0000;  --   DW 0 ; Entry 10 y
           33C : 0000;  --   DW 0 ; Entry 10 count
           33D : 0000;  --   DW 0 ; Entry 11 x
           33E : 0000;  --   DW 0 ; Entry 11 y
           33F : 0000;  --   DW 0 ; Entry 11 count
           340 : 4141;  --   DW &H4141
           341 : 4141;  --   DW &H4141
           342 : 4141;  --   DW &H4141
           343 : 4141;  --   DW &H4141
           344 : 0000;  --   DW 0 ; Entry 00 x
           345 : 0000;  --   DW 0 ; Entry 00 y
           346 : 0000;  --   DW 0 ; Entry 00 count
           347 : 0000;  --   DW 0 ; Entry 01 x
           348 : 0000;  --   DW 0 ; Entry 01 y
           349 : 0000;  --   DW 0 ; Entry 01 count
           34A : 0000;  --   DW 0 ; Entry 02 x
           34B : 0000;  --   DW 0 ; Entry 02 y
           34C : 0000;  --   DW 0 ; Entry 02 count
           34D : 0000;  --   DW 0 ; Entry 03 x
           34E : 0000;  --   DW 0 ; Entry 03 y
           34F : 0000;  --   DW 0 ; Entry 03 count
           350 : 0000;  --   DW 0 ; Entry 04 x
           351 : 0000;  --   DW 0 ; Entry 04 y
           352 : 0000;  --   DW 0 ; Entry 04 count
           353 : 0000;  --   DW 0 ; Entry 05 x
           354 : 0000;  --   DW 0 ; Entry 05 y
           355 : 0000;  --   DW 0 ; Entry 05 count
           356 : 0000;  --   DW 0 ; Entry 06 x
           357 : 0000;  --   DW 0 ; Entry 06 y
           358 : 0000;  --   DW 0 ; Entry 06 count
           359 : 0000;  --   DW 0 ; Entry 07 x
           35A : 0000;  --   DW 0 ; Entry 07 y
           35B : 0000;  --   DW 0 ; Entry 07 count
           35C : 0000;  --   DW 0 ; Entry 08 x
           35D : 0000;  --   DW 0 ; Entry 08 y
           35E : 0000;  --   DW 0 ; Entry 08 count
           35F : 0000;  --   DW 0 ; Entry 09 x
           360 : 0000;  --   DW 0 ; Entry 09 y
           361 : 0000;  --   DW 0 ; Entry 09 count
           362 : 0000;  --   DW 0 ; Entry 10 x
           363 : 0000;  --   DW 0 ; Entry 10 y
           364 : 0000;  --   DW 0 ; Entry 10 count
           365 : 0000;  --   DW 0 ; Entry 11 x
           366 : 0000;  --   DW 0 ; Entry 11 y
           367 : 0000;  --   DW 0 ; Entry 11 count
           368 : 0000;  --   DW 0 ; Entry 12 x
           369 : 0000;  --   DW 0 ; Entry 12 y
           36A : 0000;  --   DW 0 ; Entry 12 count
  END;
